"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ PostgreSQL
"""
import asyncio
import pandas as pd
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from app.database import async_session, engine
from app.models.category import Category
from app.models.place import Place
import re

# –ú–∞–ø–ø–∏–Ω–≥ category_id –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–∞ –Ω–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORY_MAPPING = {
    1: 1,   # –ü–∞–º—è—Ç–Ω–∏–∫–∏ –∏ —Å–∫—É–ª—å–ø—Ç—É—Ä—ã
    2: 2,   # –ü–∞—Ä–∫–∏ –∏ —Å–∫–≤–µ—Ä—ã
    3: 3,   # –¢–∞–∫—Ç–∏–ª—å–Ω—ã–µ –º–∞–∫–µ—Ç—ã
    4: 4,   # –ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ
    5: 5,   # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    6: 6,   # –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –¥–æ—Å—É–≥
    7: 7,   # –ú—É–∑–µ–∏
    8: 8,   # –¢–µ–∞—Ç—Ä—ã –∏ —Ñ–∏–ª–∞—Ä–º–æ–Ω–∏–∏
    10: 9,  # –°—Ç—Ä–∏—Ç-–∞—Ä—Ç –∏ –º–æ–∑–∞–∏–∫–∏ (category_id 10 –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ ‚Üí 9 –≤ –Ω–∞—à–µ–π –ë–î)
}


def extract_coordinates(coordinate_str):
    """
    –ò–∑–≤–ª–µ—á—å —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ POINT (longitude latitude)
    """
    if not coordinate_str or pd.isna(coordinate_str):
        return None, None
    
    match = re.search(r'POINT \(([\d.]+) ([\d.]+)\)', coordinate_str)
    if match:
        longitude = float(match.group(1))
        latitude = float(match.group(2))
        return latitude, longitude
    return None, None


async def load_categories():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î"""
    categories_data = [
        {"id": 1, "name": "–ü–∞–º—è—Ç–Ω–∏–∫–∏ –∏ —Å–∫—É–ª—å–ø—Ç—É—Ä—ã", "description": "–ü–∞–º—è—Ç–Ω–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –ª–∏—á–Ω–æ—Å—Ç—è–º –∏ —Å–∫—É–ª—å–ø—Ç—É—Ä—ã", "avg_visit_duration": 15},
        {"id": 2, "name": "–ü–∞—Ä–∫–∏ –∏ —Å–∫–≤–µ—Ä—ã", "description": "–ü–∞—Ä–∫–∏, —Å–∫–≤–µ—Ä—ã, —Å–∞–¥—ã –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫ –∏ –æ—Ç–¥—ã—Ö–∞", "avg_visit_duration": 45},
        {"id": 3, "name": "–¢–∞–∫—Ç–∏–ª—å–Ω—ã–µ –º–∞–∫–µ—Ç—ã", "description": "–¢–∞–∫—Ç–∏–ª—å–Ω—ã–µ –º–∞–∫–µ—Ç—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –ª—é–¥–µ–π —Å –û–í–ó", "avg_visit_duration": 10},
        {"id": 4, "name": "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ", "description": "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ —Ä–µ–∫ –í–æ–ª–≥–∏ –∏ –û–∫–∏", "avg_visit_duration": 30},
        {"id": 5, "name": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "description": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–¥–∞–Ω–∏—è, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏", "avg_visit_duration": 20},
        {"id": 6, "name": "–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –¥–æ—Å—É–≥", "description": "–î–≤–æ—Ä—Ü—ã –∫—É–ª—å—Ç—É—Ä—ã, –ø–ª–∞–Ω–µ—Ç–∞—Ä–∏–∏, –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã", "avg_visit_duration": 60},
        {"id": 7, "name": "–ú—É–∑–µ–∏", "description": "–ú—É–∑–µ–∏, –≥–∞–ª–µ—Ä–µ–∏, –≤—ã—Å—Ç–∞–≤–æ—á–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã", "avg_visit_duration": 60},
        {"id": 8, "name": "–¢–µ–∞—Ç—Ä—ã –∏ —Ñ–∏–ª–∞—Ä–º–æ–Ω–∏–∏", "description": "–¢–µ–∞—Ç—Ä—ã, —Ñ–∏–ª–∞—Ä–º–æ–Ω–∏–∏, –∫–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–µ –∑–∞–ª—ã", "avg_visit_duration": 120},
        {"id": 9, "name": "–°—Ç—Ä–∏—Ç-–∞—Ä—Ç –∏ –º–æ–∑–∞–∏–∫–∏", "description": "–£–ª–∏—á–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ, –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏, —Å–æ–≤–µ—Ç—Å–∫–∏–µ –º–æ–∑–∞–∏–∫–∏", "avg_visit_duration": 10},
    ]
    
    async with async_session() as session:
        for cat_data in categories_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            result = await session.execute(
                select(Category).where(Category.id == cat_data["id"])
            )
            existing = result.scalar_one_or_none()
            
            if not existing:
                category = Category(**cat_data)
                session.add(category)
        
        await session.commit()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories_data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")


async def load_places():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Å—Ç–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
    df = pd.read_excel('cultural_objects_mnn.xlsx')
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞")
    
    loaded_count = 0
    skipped_count = 0
    
    async with async_session() as session:
        for _, row in df.iterrows():
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                latitude, longitude = extract_coordinates(row.get('coordinate'))
                
                if not latitude or not longitude:
                    skipped_count += 1
                    continue
                
                # –ú–∞–ø–ø–∏–º category_id
                original_cat_id = row.get('category_id')
                category_id = CATEGORY_MAPPING.get(original_cat_id)
                
                if not category_id:
                    skipped_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Å—Ç–æ
                result = await session.execute(
                    select(Place).where(Place.id == int(row['id']))
                )
                existing = result.scalar_one_or_none()
                
                if existing:
                    skipped_count += 1
                    continue
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π (–∑–∞–º–µ–Ω—è–µ–º nan –Ω–∞ None –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
                title = str(row.get('title', ''))
                address = str(row.get('address', '')) if pd.notna(row.get('address')) else ''
                description = str(row.get('description', ''))[:1000] if pd.notna(row.get('description')) else ''
                url = str(row.get('url', '')) if pd.notna(row.get('url')) else None
                
                # –°–æ–∑–¥–∞—ë–º –º–µ—Å—Ç–æ
                place = Place(
                    id=int(row['id']),
                    title=title,
                    address=address,
                    latitude=float(latitude),
                    longitude=float(longitude),
                    description=description,
                    description_clean=clean_html(description),
                    category_id=int(category_id),
                    url=url
                )
                
                session.add(place)
                loaded_count += 1
                
                # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–µ 50 –∑–∞–ø–∏—Å–µ–π
                if loaded_count % 50 == 0:
                    await session.commit()
                    print(f"  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {loaded_count} –º–µ—Å—Ç...")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {row.get('id')}: {e}")
                skipped_count += 1
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
        await session.commit()
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–µ—Å—Ç: {loaded_count}")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")


def clean_html(text):
    """–£–¥–∞–ª–∏—Ç—å HTML —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return ""
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
    clean = re.sub(r'<[^>]+>', '', str(text))
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    clean = ' '.join(clean.split())
    return clean[:1000]  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await load_categories()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—Ç–∞
    await load_places()
    
    print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(main())
